cmake_minimum_required(VERSION 3.13)

project(webserver LANGUAGES CXX)

# Set paths
set(STATIC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/static)
set(HTML_INPUT ${STATIC_DIR}/index.html)
set(JS_INPUT   ${STATIC_DIR}/uPlot.iife.min.js)
set(CSS_INPUT   ${STATIC_DIR}/uPlot.min.css)

set(HTML_INLINED  ${STATIC_DIR}/index.inlined.html)
set(HTML_OUTPUT   ${CMAKE_CURRENT_SOURCE_DIR}/index_inlined_html.h)

add_custom_command(
    OUTPUT ${HTML_INLINED}
    COMMAND ${CMAKE_COMMAND} -E echo "Embedding JS and CSS into index.html"
    COMMAND ${CMAKE_COMMAND} -E env python3 ${CMAKE_CURRENT_SOURCE_DIR}/embed_assets.py
        ${HTML_INPUT} ${CSS_INPUT} ${JS_INPUT} ${HTML_INLINED}
    DEPENDS ${HTML_INPUT} ${JS_INPUT} ${CSS_INPUT}
    COMMENT "Inlining JS and CSS into HTML"
)

add_custom_command(
    OUTPUT ${HTML_OUTPUT}
    COMMAND xxd -i index.inlined.html > ${HTML_OUTPUT}
    WORKING_DIRECTORY ${STATIC_DIR}
    DEPENDS ${HTML_INLINED}
    COMMENT "Embedding inlined HTML as C header"
)

add_custom_target(generate_webserver_static
    DEPENDS ${HTML_OUTPUT}
)

# Add the library
add_library(webserver STATIC)

# Specify the source files for the library
target_sources(webserver PRIVATE
    webserver.cpp
    ${HTML_OUTPUT}              # <- header generated by xxd
    ${JS_OUTPUT}
    ${CSS_OUTPUT}
    dhcpserver/dhcpserver.c
    dnsserver/dnsserver.c
)

# Include directories for the library
target_include_directories(webserver PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/static
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_SOURCE_DIR}/lib/L76B
)


# Ensure library builds after HTML is generated
add_dependencies(webserver generate_webserver_static)

# Link Pico SDK libraries
target_link_libraries(webserver PUBLIC
    pico_stdlib
    L76B
    pico_cyw43_arch_lwip_threadsafe_background
)

# Set C++ standard
target_compile_features(webserver PUBLIC cxx_std_17)